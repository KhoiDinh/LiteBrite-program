/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CS151.HW3;


import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.ToolBar;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.SVGPath;
import javafx.stage.Stage;

/**
 *
 * @author narayan
 */
public class LiteBrite extends Application {
	
	private static Color colorChoice;

	@Override
	public void start(final Stage stage) throws Exception {
		int rows = 50;
		int columns = 50;

		stage.setTitle("Enjoy your game");

		GridPane grid = new GridPane();
		grid.getStyleClass().add("game-grid");

		for(int i = 0; i < columns; i++) {
			ColumnConstraints column = new ColumnConstraints(10);
			grid.getColumnConstraints().add(column);
		}

		for(int i = 0; i < rows; i++) {
			RowConstraints row = new RowConstraints(10);
			grid.getRowConstraints().add(row);
		}

		for (int i = 0; i < columns; i++) {
			for (int j = 0; j < rows; j++) {
				Pane pane = new Pane();
				pane.setOnMouseReleased(e -> {
					pane.getChildren().add(Anims.getAtoms(1));
					if(e.getClickCount()==2)
					{
						Rectangle temp = new Rectangle(0,0,9,9);
						temp.setFill(Color.BLACK);
						pane.getChildren().add(temp);
						
					}
					
				});
				pane.getStyleClass().add("game-grid-cell");
				if (i == 0) {
					pane.getStyleClass().add("first-column");
				}
				if (j == 0) {
					pane.getStyleClass().add("first-row");
				}
				grid.add(pane, i, j);
			}
		}
		final ColorPicker colorPicker = new ColorPicker();
		colorPicker.setOnAction(new EventHandler() {
	            public void handle(Event t) {
	            	colorChoice = colorPicker.getValue();               
	            }
	        });

		
		Button resetb = new Button();
		resetb.setText("Reset");
		resetb.setOnAction(new EventHandler() {
			public void handle(Event t) {
				
				
				for(Node node: grid.getChildren())
				{
					Rectangle rect = new Rectangle(0, 0, 9,9);
					rect.setFill(Color.BLACK);
					Pane pane2 = (Pane) node;
					pane2.getChildren().add(rect);
					
				}
			}

			
		});

       
		
		VBox box = new VBox();
		box.getChildren().add(colorPicker);
		box.getChildren().add(resetb);
		box.getChildren().add(grid);
		
		//ask teacher about this
		//Scene scene = new Scene(box, (columns * 10)+20, (rows * 10)+20);
		Scene scene = new Scene(box);
		scene.getStylesheets().add(LiteBrite.class.getResource("resources/game.css").toExternalForm());	
		 
		stage.setScene(scene);
		stage.show();
		
		
		
	}

	public static class Anims {

		public static Node getAtoms(final int number)
		{
			
			
			Rectangle rect = new Rectangle(number-1, number-1, 9,9);
			//might not need but ask
			if(colorChoice ==null)
			{
				rect.setFill(Color.WHITE);
			}
			else
			{
			rect.setFill(colorChoice);
			}
			Group choice = new Group();
			choice.getChildren().add(rect);
			return choice;
		}
		
	
			
	
	}

	public static void main(final String[] arguments) {
		Application.launch(arguments);
	}

}
